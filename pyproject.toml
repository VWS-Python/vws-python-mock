[tool.pylint]

    [tool.pylint.'MASTER']

    # Pickle collected data for later comparisons.
    persistent = true

    # Use multiple processes to speed up Pylint.
    jobs = 0

    # List of plugins (as comma separated values of python modules names) to load,
    # usually to register additional checkers.
    load-plugins = [
		'pylint.extensions.docparams',
		'pylint.extensions.no_self_use',
	]

    # Allow loading of arbitrary C extensions. Extensions are imported into the
    # active Python interpreter and may run arbitrary code.
    unsafe-load-any-extension = true

    [tool.pylint.'MESSAGES CONTROL']

    # Enable the message, report, category or checker with the given id(s). You can
    # either give multiple identifier separated by comma (,) or put this option
    # multiple time (only on the command line, not in the configuration file where
    # it should appear only once). See also the "--disable" option for examples.
    enable = [
        'spelling',
        'useless-suppression',
    ]

    # Disable the message, report, category or checker with the given id(s). You
    # can either give multiple identifiers separated by comma (,) or put this
    # option multiple times (only on the command line, not in the configuration
    # file where it should appear only once).You can also use "--disable=all" to
    # disable everything first and then reenable specific checks. For example, if
    # you want to run only the similarities checker, you can use "--disable=all
    # --enable=similarities". If you want to run only the classes checker, but have
    # no Warning level messages displayed, use"--disable=all --enable=classes
    # --disable=W"

    disable = [
        # Style issues that we can deal with ourselves
        'too-few-public-methods',
        'too-many-ancestors',
        'too-many-locals',
        'too-many-arguments',
        'too-many-instance-attributes',
        'too-many-return-statements',
        'too-many-lines',
        'too-many-statements',
        'locally-disabled',
        # Let flake8 handle long lines
        'line-too-long',
        # Let flake8 handle unused imports
        'unused-import',
        # Let isort deal with sorting
        'ungrouped-imports',
        # We don't need everything to be documented because of mypy
        'missing-type-doc',
        'missing-return-type-doc',
        # Too difficult to please
        'duplicate-code',
        # Let isort handle imports
        'wrong-import-order',
    ]

    [tool.pylint.'FORMAT']

    # Allow the body of an if to be on the same line as the test if there is no
    # else.
    single-line-if-stmt = false

    [tool.pylint.'SPELLING']

    # Spelling dictionary name. Available dictionaries: none. To make it working
    # install python-enchant package.
    spelling-dict = 'en_US'

    # A path to a file that contains private dictionary; one word per line.
    spelling-private-dict-file = 'spelling_private_dict.txt'

    # Tells whether to store unknown words to indicated private dictionary in
    # --spelling-private-dict-file option instead of raising a message.
    spelling-store-unknown-words = 'no'

[tool.black]

line-length = 79

[tool.coverage.run]

branch = true
omit = [
  "src/mock_vws/_cgi.py",
]

[tool.pytest.ini_options]

xfail_strict = true
log_cli = true
env_files = ["./vuforia_secrets.env"]

[tool.check-manifest]

ignore = [
  "*.enc",
  "readthedocs.yaml",
  "CHANGELOG.rst",
  "CODE_OF_CONDUCT.rst",
  "CONTRIBUTING.rst",
  "LICENSE",
  "Makefile",
  "ci",
  "ci/**",
  "codecov.yaml",
  "doc8.ini",
  "docs",
  "docs/**",
  ".git_archival.txt",
  "spelling_private_dict.txt",
  "tests",
  "tests-pylintrc",
  "tests/**",
  "vuforia_secrets.env.example",
  "lint.mk",
  "src/mock_vws/_flask_server/dockerfiles/*/Dockerfile",
  "secrets.tar.gpg",
]

[tool.mypy]

strict = true

[[tool.mypy.overrides]]
module = [
    "mock_vws/_cgi",
]
ignore_errors = true

[[tool.mypy.overrides]]

module = [
    "docker",
    "docker.models.networks",
]

ignore_missing_imports = true

[tool.doc8]

max_line_length = 2000
ignore_path = [
    "./.eggs",
    "./docs/build",
    "./docs/build/spelling/output.txt",
    "./node_modules",
    "./src/*.egg-info/",
    "./src/*/_setuptools_scm_version.txt",
]

[tool.setuptools_scm]

# We use a fallback version like
# https://github.com/pypa/setuptools_scm/issues/77 so that we do not
# error in the Docker build stage of the release pipeline.
#
# This must be a PEP 440 compliant version.
fallback_version = "0.0.0"

[build-system]
requires = ["setuptools", "pip", "wheel"]
build-backend = "setuptools.build_meta"

[tool.ruff]
select = ["ALL"]

ignore = [
    # We do not annotate the type of 'self', or 'cls'.
    "ANN101",
    "ANN102",
    "ANN401",
    # We are happy to manage our own "complexity".
    "C901",
    # Allow our chosen docstring line-style - no one-line summary.
    "D200",
    "D203",
    "D205",
    "D212",
    "D213",
    "D400",
    "D415",
    # Allow backslashes in a docstring.
    # See https://click.palletsprojects.com/en/8.0.x/documentation/#preventing-rewrapping.
    "D301",
    # It is too much work to make every docstring imperative.
    "D401",
    # We ignore some docstyle errors which do not apply to Google style
    # docstrings.
    "D406",
    "D407",
    # We have an existing interface to support and so we do not want to change
    # exception names.
    "N818",
    # Ignore "too-many-*" errors as they seem to get in the way more than
    # helping.
    "PLR0912",
    "PLR0913",
    "PLR0915",
    # Allow 'assert' as we use it for tests.
    "S101",
    # Allow imports which are only used for type checking to be outside type
    # checking blocks.
    "TCH001",
    "TCH002",
    "TCH003",
]

line-length = 79
target-version = "py311"

[tool.ruff.per-file-ignores]
# Ignore copy of old stdlib cgi module.
"src/mock_vws/_cgi.py" = ["ALL"]
"tests/**" = [
    # Allow possible hardcoded passwords in tests.
    "S105",
    "S106",
]

[tool.distutils.bdist_wheel]
universal = true

[project]
authors = [ { name = "Adam Dangoor", email = "adamdangoor@gmail.com"} ]
classifiers = [
    "Operating System :: POSIX",
    "Environment :: Web Environment",
    "Programming Language :: Python :: 3.11",
    "License :: OSI Approved :: MIT License",
    "Development Status :: 5 - Production/Stable",
    "Framework :: Pytest",
]
description = "A mock for the Vuforia Web Services (VWS) API."
dynamic = ["version"]
keywords = ["vuforia", "vws", "mock", "fake", "client"]
license = { file = "LICENSE" }
name = "vws-python-mock"
readme = { file = "README.rst", content-type = "text/x-rst"}
requires-python = ">=3.10"

[project.urls]
Source = "https://github.com/VWS-Python/vws-python-mock"
Documentation = "https://vws-python-mock.readthedocs.io"

[tool.setuptools]
zip-safe = false

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
mock_vws = ["py.typed"]

